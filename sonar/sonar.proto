syntax = "proto3";

package sonar;

import "google/protobuf/empty.proto";
import "google/protobuf/field_mask.proto";

service SonarService {
	// rpc UserList(UserListRequest) returns (UserListResponse);
	// rpc UserCreate(UserCreateRequest) returns (UserCreateResponse);
	// rpc UserDelete(UserDeleteRequest) returns (UserDeleteResponse);

	rpc ArtistList(ArtistListRequest) returns (ArtistListResponse);
	rpc ArtistCreate(ArtistCreateRequest) returns (Artist);
	rpc ArtistUpdate(ArtistUpdateRequest) returns (Artist);
	rpc ArtistDelete(ArtistDeleteRequest) returns (google.protobuf.Empty);
}

// A positive duration value
message Duration {
	uint32 nanoseconds = 1;
}

// A unix timestamp
message Timestamp {
	uint64 seconds = 1;
	uint32 nanoseconds = 2;
}

message Property {
	string key = 1;
	string value = 2;
}

message PropertyUpdate {
	string key = 1;
	optional string value = 2;
}

message GenresUpdate {
}

message User {
	uint32 id = 1;
	string username = 2;
	optional uint32 avatar = 3;
}

message Artist {
	uint32 id = 1;
	string name = 2;
	uint32 album_count = 3;
	uint32 listen_count = 4;
	repeated string genres = 5;
	optional uint32 coverart = 6; 
	repeated Property properties = 7;
}

message ArtistListRequest {
	optional uint32 offset = 1;
	optional uint32 count = 2;
}

message ArtistListResponse {
	repeated Artist artists = 1;
}

message ArtistCreateRequest {
	string name = 1;
	repeated string genres = 2;
	optional uint32 coverart = 3;
	repeated Property properties = 4;
}

message ArtistDeleteRequest {
	uint32 artist = 1;	
}

message ArtistUpdateRequest {
	uint32 artist = 1;
	optional string name = 2;
	repeated PropertyUpdate properties = 4;
	google.protobuf.FieldMask mask = 5;
}

message Album {
	uint32 id = 1;
	string name = 2;
	uint32 track_count = 3;
	Duration duration = 4;
	uint32 listen_count = 5;
	repeated uint32 artists = 6;
	repeated string genres = 7;
	optional uint32 coverart = 8;
	repeated Property properties = 9;
}

message Track {
	uint32 id = 1;
	string name = 2;
	Duration duration = 3;
	uint32 album = 4;
	uint32 listen_count = 5;
	repeated uint32 artists = 6;
	optional uint32 coverart = 7;
	repeated Property properties = 8;
}

message Playlist {
	uint32 id = 1;
	string name = 2;
	uint32 user = 3;
	uint32 track_count = 4;
	Duration duration = 5;
	optional uint32 coverart = 6;
	repeated Property properties = 7;
}

message Scrobble {
	uint32 id = 1;
	uint32 track = 2;
	uint32 user = 3;
	Duration duration = 4;
	Timestamp timestamp = 5;
	repeated Property properties = 6;
}
